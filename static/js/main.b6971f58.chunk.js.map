{"version":3,"sources":["logo.svg","Button.js","ButtonsContainer.js","words.js","choice.js","Hangman.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","props","state","isClicked","handleSelect","bind","e","this","select","value","target","style","cursor","backgroundColor","className","onClick","React","Component","ButtonsContainer","Select","generateButtons","console","log","isArr","letters","map","l","key","display","defaultProps","words","choice","arr","Math","floor","random","length","Hangman","guessCounted","word","toLowerCase","guessed","Set","result","compare","playAgain","split","ltr","has","document","querySelector","setState","st","resultPage","wordCharArray","indexOf","size","add","src","imageAPI","guessWord","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6971f58.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react'\nimport './Button.css'\n\nclass Button extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {isClicked:false}\n    this.handleSelect = this.handleSelect.bind(this)\n\n\n  }\n  handleSelect(e){\n    this.props.select(this.props.value)\n    e.target.style.cursor='not-allowed'\n    e.target.style.backgroundColor='darkgrey'\n    e.target['disabled']=true\n\n  }\n\n\n  render(){\n  \n\n    return(\n      <div className='Button'>\n      <button  onClick={this.handleSelect}  >{this.props.value}</button>\n       </div>\n    )\n  }\n}\nexport default Button\n","import React from 'react'\nimport Button from './Button'\nimport './ButtonsContainer.css'\n\nclass ButtonsContainer extends React.Component{\n  static defaultProps ={\n    letters:['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','r','s','q','t','u','v','y','w','x','z']\n  }\n constructor(props){\n   super(props)\n\n\n   this.Select = this.Select.bind(this)\n\n  //   this.playAgain = this.playAgain.bind(this)\n     this.generateButtons = this.generateButtons.bind(this)\n\n }\n\n\n Select(e){\n\n    this.props.select(e);\n\n }\n\n generateButtons(){\n   console.log(this.props.isArr);\n   const buttons =\n   this.props.letters.map(l =>\n     <Button key={l}\n            value={l}\n            select={this.Select}\n\n            />)\n          //  console.log(this.props.isPlayAgain);\n            return buttons\n }\n\n render(){\n\n   return(\n     <div className='ButtonsContainer' style={{display:this.props.display}}>\n       {this.props.display === 'flex' ? this.generateButtons() : ''}\n     </div>\n   )\n }\n}\nexport default ButtonsContainer\n","const words = ['Apple','Awkward','Bagpipes','Banjo','Bungler','Croquet','Crypt','Dwarves','Fervid','Fishhook','Fjord','Gazebo','Gypsy','Haiku','Haphazard','Hyphen','Ivory','Jazzy','Jiffy','Jinx','Jukebox','Kayak','Kiosk','Klutz','Memento','Mystify','Numbskull','Ostracize','Oxygen','Pajama','Phlegm','Pixel','Polka','Quad','Quip','Rhythmic','Rogue','Sphinx','Squawk','Swivel','Toady','Twelfth','Unzip','Waxy','Wildebeest','Yacht','Zealous','Zigzag','Zippy','Zombie']\nexport default words\n","function choice(arr){\n   let randIx = Math.floor(Math.random() * arr.length)\n   return arr[randIx]\n}\nexport default choice\n","import React from 'react'\nimport ButtonsContainer from './ButtonsContainer'\nimport  './Hangman.css'\nimport words from './words'\nimport choice from './choice'\n\nclass Hangman extends React.Component{\n  static defaultProps = {\n    imageAPI:'https://www.oligalma.com/downloads/images/hangman/hangman/',\n\n  }\n  constructor(props){\n    super(props)\n    this.state = {\n    guessCounted:0,word:choice(words).toLowerCase(),guessed:new Set(),result:'',display:'flex'}\n    this.compare = this.compare.bind(this)\n    this.playAgain = this.playAgain.bind(this)\n  }\n   guessWord(){\n     return  this.state.word.split('').map(ltr =>  this.state.guessed.has(ltr) ? ltr :' _'  )\n   }\n   playAgain(e){\n\n          const  resultPage =  document.querySelector('.result-page')\n          resultPage.style.display='none';\n          this.setState(st =>({guessCounted:0,guessed:new Set(),word:choice(words).toLowerCase(),display:'flex',result:''}))\n\n   }\n   compare(e)\n   {\n      const copyArr =[]\n      let  resultPage = document.querySelector('.result-page')\n      const wordCharArray = this.state.word.split('')\n      const index = wordCharArray.indexOf(e)\n        if(index === -1){\n              if(this.state.guessCounted<10){\n                  this.setState(st=>({guessCounted:st.guessCounted+1}))\n               }\n              else\n                  {\n                        resultPage.style.display='flex';\n                        this.setState({result:' lost!!!',display:'none'})\n\n                  }\n            }\n       else {\n              console.log('merhaba'+wordCharArray.length+this.state.guessed.size+1);\n               this.setState(st => ({guessed:st.guessed.add(e)}))\n\n\n               if(wordCharArray.length === this.state.guessed.size+1){\n                 resultPage.style.display='flex';\n                 this.setState({result:' win!!!',display:'none'})\n\n               }\n\n            }\n\n  }\n\n  render(){\n\n          const wordCharArray = this.state.word.split('')\n          return(\n            <div className='Hangman'>\n               <h1>Hangman</h1>\n               <div className='Hangman-image'>\n                <img src={this.props.imageAPI+this.state.guessCounted+'.jpg'}/>\n               </div>\n               <div className='word'>\n                <span className='dash'> {this.guessWord()}</span>\n              </div>\n                   <ButtonsContainer   select={this.compare} display={this.state.display}  />\n                   <div className='answer' style={this.state.result === ' lost!!!' || this.state.result === ' win!!!'? { display:'block'}:{ display:'none'}}>{this.state.word}</div>\n                   <div className='result-page'>\n                    <p>You  <span  className='result'> {this.state.result}</span></p>\n                    <p> If you want to try again.Click button below!!</p>\n                    <button onClick={this.playAgain}>Play again </button>\n                  </div>\n            </div>\n\n    )\n  }\n}\nexport default Hangman\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Hangman from './Hangman'\n\nclass App extends React.Component{\n  render(){\n    return(\n      <Hangman />\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}